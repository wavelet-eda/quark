/*
Quark Interface Documentation (*.qk):

SV improved Verilog with interfaces, trying to connect modules together with a
single "variable" or connection that slightly reduced the tedium of connecting
tons of slightly differently named wires. This was an improvement, but it had
some limitations, mostly from confusions and ambiguity in the language.

First the user has to declare their own modports to define the direction of
different signals in the interface. This means you could hypothetically build
an interface that connects three or modules coherently with a single interface
instantiation. This also means that multiple modules can be connected to an
interface, with some amount of ambiguity on which of those modules drives the
interface "outputs" from their perspective.

Quark makes a few modifications to this, namely all interfaces are point to 
point (master/slave), and their direction is indicated by all signals either
being an input or output, instead of explicit modports

*/

// Simple interface
interface my_intf {
    output a;
    input b;
}

// Interface with parameters
interface my_param_intf [bit [32] WIDTH] {
    output a;
    output [WIDTH] data;
    input b;
}

// Interface with block signals
interface my_block_intf {
    output {
        bit a;
    }
    input {
        bit b;
    }
}

// Interfaces can contain arbitrary logic as long as they only depend on
// parameters, not signals, since interfaces generate no runtime logic
interface my_param_intf [bit [32] WIDTH] {
    bit [32] width_half = WIDTH / 2;

    output a;
    output [width_half] data;
    input b;
}

// Interfaces can be nested, but a nested interface must also be labeled as an
// input or an output
interface my_nest_intf {
    output my_intf a;
    input my_intf b;
}

// Interfaces if not connected or assigned to will throw an error at compile
// time, unless a default set of values is provided for that interface
// Individual, non-interface, signals in a module will always throw an error
// when not connected to, so interfaces provide a way to handle "optional"
// connections

interface my_default_intf {
    // It will throw an error if you do not assign values to all of the signals
    // in the interface, for either the input or the output interface, so long
    // as any are assigned
    output bit valid = 'h0;
    output bit [32] data = 'b0;
    input bit ready_n = 'h1;
}

// If you have nested interfaces and you want to have default behavior as well,
// then the nested interfaces must already have default behavior defined, or 
// you can set all of the default behaviors for the sub-interfaces manually
// if they do not already have default behavior

interface my_non_default_intf {
    output bit valid;
    output bit [32] data;
    input bit ready_n;
}

interface my_nested_default_intf {
    input my_default_intf a;
    // This will use the struct default until overridden
    input some_struct_with_default_t s;
    output my_non_default_intf b = {valid: 'b0, data: 'b0, ready_n: 'b1};
}

// Interfaces are of course only useful when used with modules, so we first go
// over the syntax to have a module accept an interface. We are going to define
// a clearly useful interface, data_stream, with some parameters and default
// values to provide depth to this example

interface data_stream_intf [bit [32] W] {
    output bit valid = 'b0;
    output bit [W] data = 'b0;
    input bit ready = 'b0;
}

// First we describe a module that takes a data stream input and produces a data
// stream output
module stream_module [bit [32] W] {
    // Remember to fulfill the interface parameters when declaring it
    input data_stream_intf [W] stream_in;
    output data_stream_intf [W] stream_out;

    // The ready signals goes 'backwards' so we need a future statement to
    // handle it
    future (bit ready_in) {
        bit valid_in;
        bit [W] data_in;
        // Here the stream in interface is called
        valid_in, data_in = stream_in(ready_in);
    // Here we 'call' the stream out interface to fulfill its need for data
    // and the valid signal, and it gives us the ready signal we need to
    // finish our future statement
    } (stream_out(valid_in, data_in + 'b1));
}

// Now if we want to connect two of these stream modules together in another
// module we need to 
module double_stream_module [bit [32] W] {
    input data_stream_intf [W] stream_in;
    output data_stream_intf [W] stream_out;

    // We can get a stream out from the module, but if we want to modify the
    // stream we have to fully deconstruct and reconstruct the stream
    data_stream_intf [W] stream_mid = new stream_module [W] (stream_in);

    // Again we can pass the stream to another module that would accept it,
    // but we are unable to modify the stream in the process
    stream_out = new stream_module [W] (stream_mid);
}

// There are specific semantics for the ownership of interfaces and how they
// can be both created and destroyed by modules that take them as inputs or
// outputs 
module stream_ownership_module [bit [32] W] {
    input data_stream_intf [W] stream_in;
    output data_stream_intf [W] stream_out;

    // This is an interface but we cannot access it's value yet nor can we pass
    // it as an input interface to another module since it hasn't been assigned
    // to yet
    data_stream_intf [W] stream_custom;

    // Now that we have assigned to the interface through a module that produces
    // it, we can access the 
    stream_custom = new stream_module [W] (stream_in);

}

interface Handshake {
    output bit valid;
    input bit ready;
}

interface Stream[type T] {
    output Handshake handshake;
    output T data;
}

module streamController {
    struct Input {
        Handshake hand_in;
    }
    struct Output {
        Handshake hand_out;
    }

    // Anything that is an input or returned is borrowed
    // Anything that is an output or declared is owned

    MyStruct ms = {}; // How a struct takes on defaults
    MyStruct ms = {
        a = x
    };

    var ms = {};

    MyStruct ms = {};

    MyStruct[Bit] = {};

    Handshake h;

    future (Bit ready_out) {
        close hand_in(ready_out); // If you pass nothing here it takes defaults
        // You only get hierarchy access after the close
        h = open Handshake(hand_in.valid);
        // Likewise you only get hierarchy access after the open
    } (h.ready);

    a = ...
    <mut> Type a = ...
    array[...<, ...>] = ...
    array[msb:<<lsb>:step>] = ...
    assignment <, assigment> = (,)  
    {a, b} = 32'hff;

    // All unused values throw compiler errors
    // but you can do _ = unused_value to ignore it

    return h;
}

// Ethan needs to write a paper on how implicit parameters are resolved

key_word Name[B, C] {
    X[B] a;
    X[C] a;
}

Name[32, 16] a = {
    x = ...
    y = ...
}
  

// Handshake h;

// ready_in = start h(valid_in);

// // ...

// ready_in = finish h(valid_out);

// typeof(h) != typeof(Handshake)
// typeof(h) == Handsake
// typeof(Handshake) == func(Bit) => Handshake


// typeof(h) == typeof(&Handsake) == func(Bit) => Bit

// Handshake h = new Handshake[]();

// Bit valid = start h(ready);

// // ...

// Bit ready = finish h(valid);



// fn reduce[Size Q, Bit[32] C](B inital, B values) {
//     for i in range()
//     // fn(Bit): Bit E = fn(Bit a) => F(0, a)

//     // bit [32] B = A;
// }

// reduce[Bit[32], Arrat[B]]

// reduce[+](0, array);
 
module streamStuff {
    struct Input {
        Stream[Bit[32]] stream_in;
    }
    struct Output {
        Stream[Bit[32]] stream_out;
    }

    OwnedHandshake h_in, Bit[32] data = stream_in();

    Bit valid_in = h_in(ready_in);

    Handshake h_out = new streamController(h_in);

    return {
        stream_out = new Stream(data_out, h_out);
    };
}



enum State {
    On[fn(Bit, Bit): State next = Off](Bit a, Bit b) = 1;
    Off = 0;
}

typeof(On) != State
typeof(On) == fn(Bit, Bit): State
typeof(Off) == fn(): State

fn toValue(State s): Bit {
    return match s {
        case On[NEXT]:

        case Off: 0
    }
}

fn mmakeState(Bit s): State {
    return match s {
        case 1: On
        case 
    }
}


//traits

trait Writable[T] {
    fn toString(Bit, T): String
    fn read(String): T
}

struct Int has Writable {
    Bit[32] a;

    fn toString(Int a): {
        return IntToString(a);
    }
}

fn IntToString(Int a): String {
    
}

// struct Double {
    
// }

// impl Writable[Double] {
    
// }

// impl 


fn writeToString(Writable[T] a): string {
    toString(a)   
}


